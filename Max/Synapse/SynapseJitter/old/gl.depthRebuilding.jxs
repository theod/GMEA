<jittershader name="freenect.perspectivecorrection">		<description>		This shader processes the depth map of the jit.freenect.grab external and outputs 	perspective-corrected x,y,z vertex coordinates for use with jit.gl.mesh and others. 
	It expects jit.freenect.grab to output in mode 0 (raw). 		Based on the math at http://openkinect.org/wiki/Imaging_Information		Shader by Dieter Vandoren (http://dietervandoren.net).		</description>
		<param name="minDistance" type="float" default="-0.024" />	<param name="scaleFactor" type="float" default="0.0021" />	<param name="tex0" type="float" default="0." />	<language name="glsl" version="1.0">		<bind param="minDistance" program="fp" />		<bind param="scaleFactor" program="fp" />		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />		<program name="fp" type="fragment">		<![CDATA[
//the essential stuff	uniform sampler2DRect tex0;
	varying vec2 texcoord0;
	varying vec2 texdim0;	//our special stuff	uniform float minDistance;	uniform float scaleFactor;
void main(){   
	float d = texture2DRect(tex0, texcoord0).r;	float z = 0.1236 * tan(d / 2842.5 + 1.1863);		gl_FragColor.w = (texcoord0.x - texdim0.x/2.) * (z - minDistance) * scaleFactor * 0.13;		// dimX/2 to center	gl_FragColor.x = (texcoord0.y - texdim0.y/2.) * (z - minDistance) * scaleFactor * 0.13;		// dimY/2 to center	gl_FragColor.y = z*0.13;

	if (d > 0.)		gl_FragColor.z = 1.;
	else
		gl_FragColor.z = 0.;}]]>		</program>	</language></jittershader>